// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better Auth required models
model User {
  id           String        @id @default(cuid())
  email        String        @unique
  emailVerified Boolean      @default(false)
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relations
  tracks       HealthTrack[]
  sessions     Session[]
  accounts     Account[]
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model Account {
  id            String   @id @default(cuid())
  userId        String
  accountId     String
  providerId    String
  accessToken   String?
  refreshToken  String?
  expiresAt     DateTime?
  password      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, accountId])
  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([identifier, value])
  @@map("verifications")
}

// Application models
model HealthTrack {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  events Event[]
  
  @@map("health_tracks")
}

model Event {
  id          String    @id @default(cuid())
  trackId     String
  date        DateTime
  type        EventType
  title       String
  description String?
  fileUrl     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  track HealthTrack @relation(fields: [trackId], references: [id], onDelete: Cascade)
  
  @@map("events")
}

enum EventType {
  NOTE
  APPOINTMENT
  RESULT
  LETTER
  FEELING
  EXERCISE
}

